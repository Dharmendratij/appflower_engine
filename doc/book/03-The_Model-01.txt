
# Introducing Models and Databases

In order to understand what *Models and Databases* are and why should you use them, first you should understand the way web
applications work.

## How do web applications work?

Of course each application is different. They differ in prupose, complexity, usability and many other ways. 
However, you don't need to worry about all this, since their *essence*, the way they work, *is always the same*.:

A web application usually performs operations only when a user requests it to do so. Otherwise it's just sitting there and waiting. 

A user may push a button, fill a form, adjust a slider etc. Thus, he *communicates* his intention towards the application in some way. 

When this happens, some *information* (a.k.a data) is created, which will be be sent to the application for procesing.

The application then picks up this information, performs whatever operation the user requested, and generates the results to be 
delievered.

Web applications do this over a network, those "normal" ones sitting on your desktop do it internally, using only your computer. 

Basically that's it. Simple, huh?

Well, here is an example:

Let's have a look at at a very basic calculator application. It displays only one input box. You type some math and it calculates the 
results:

	Input:  --> 5+2 --> sending data to application --> processing, returning results   --> 7
	 
It works fine, and it's simple indeed.

Now let's check out another example, an EUR -> USD converter. It also has only 1 input box, that's where you type the amount of EUR
to be converted. 

	Input --> 10 --> sending data to application --> processing, returning results --> 12 USD  
	
This one works basically the same way as our calculator above, right? Well, *not* exactly..

You can provide the amount of euros you want to convert, but that's not enough. To really make this work, the application also needs to know 
the exchange rate between EUR and USD. Of course, you could set some fixed rate, but that wouldn't be very wise, since the rate changes 
very often. 
So then how should this application find out the correct value? At any given time, 24 / 7? 

Well, this iformation is stored somewhere. Upon each request, the converter reads the current rate from this storage, and will use that 
to perform the calculation. The storage always conatins the actual rate, since it gets updated whenever the rate changes, thus accuracy is 
guaranteed.

So the converter appliaction really works like this:

	Input --> 10 --> sending data to application --> obtaining actual rate from storage --> processing, returning results --> 12 USD 
 

And this is the important part:

Many operations can be performed "on the fly", using only data provided either by you, or the user of the application. 

<div class="important">
But at some point, most applications will need a way to *obtain (or read)* information form an external source, because you just can't 
pre-define everything.

Furhermore, most applications will also have to be able to *store (or write)* information somewhere, beceause that information will be 
needed later.

Unless your application is a very basic one, it *needs* a storage mechanism, otherwise it simply won't work.

</div>

In our example, the application *stores* the current exchange rate, and *obtains* it whenever it has to perform a conversion.

Another well known example could be a signin screen, which you can find on every web site these days. The mechanism identifies you
by comparing the password and username you just keyed in with something it reads from its records. On the other hand, when you signed up with
that web site, your username and password was saved somewhere, otherwise the signin screen could never find out who you are. 

Storing and obtaining (or reading and writing) information can be done in a number of different ways, but the preferred way of doing so is 
usually using a *Database or Model*. That's the case with AppFlower applications as well, they're all very Model friendly. 

In the next section we'll find out why.