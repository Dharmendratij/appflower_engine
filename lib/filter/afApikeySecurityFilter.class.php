<?php

/**
 * A filter to allow authentication by an API key.
 * Put the filter before the security filter.
 *
 * Request parameter "af_apikey" is checked for the API key.
 * Each user has her own API key.
 * The key could be regenerated by changing the user password.
 */
class afApikeySecurityFilter extends sfFilter {
    public function execute($filterChain) {
        $context = $this->getContext();
        $user = $context->getUser();
        if ($this->isFirstCall() && !$user->isAuthenticated()) {
            $apikey = $context->getRequest()->getParameter('af_apikey');
            if ($apikey) {
                $afUser = self::getApiUser($apikey);
                if ($afUser !== null) {
                    $context->getUser()->signIn($afUser);
                } else {
                    echo json_encode(array('success'=>false, 'message'=>'Wrong API key.'));
                    exit;
                }
            }
        }

        $filterChain->execute();
    }

    /**
     * Returns an active AppFlowerUser for a valid key
     * or null.
     */
    private static function getApiUser($apikey) {
        $parts = explode(afAuthenticDatamaker::MSG_SEPARATOR, $apikey, 2);
        if(count($parts) !== 2) {
            return null;
        }

        list($hmac, $username) = $parts;
        $userQuery = sfProjectConfiguration::getActive()->getAppFlowerUserQuery();
        $afUser = $userQuery->findOneByUsername($username);
        if ($afUser === null) {
            return null;
        }

        $extraKey = $afUser->getPassword();
        $username = afAuthenticDatamaker::plainDecode($apikey, $extraKey);
        if ($username === null) {
            //Console::debug('expected API key:', self::getApikey($afUser));
            return null;
        }

        return $afUser;
    }

    public static function isCurrentUserKey($apikey) {
        $user = sfContext::getInstance()->getUser();
        if (!$user->isAuthenticated()) {
            return false;
        }

        $afUser = self::getApiUser($apikey);
        if ($afUser === null) {
            return false;
        }

        return ($afUser->getUsername() ===
            $user->getAppFlowerUser()->getUsername());
    }

    /**
     * Returns API key usable for the given user.
     * The API key consists of "hmac,username".
     */
    public static function getApikey($afUser) {
        $extraKey = $afUser->getPassword();
        return afAuthenticDatamaker::plainEncode($afUser->getUsername(),
            $extraKey);
    }
}

