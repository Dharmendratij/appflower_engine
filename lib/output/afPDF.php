<?php

class afPDF extends FPDF {
	
	public
	$widget,
	$af_version, 
	$widths,
	$borders,
	$fills,
	$orientation,
	$aligns;
	
	
	private function getMMValue($pixels) {
		return ($pixels/72)*25.4;
	}
	
	
	public function Header()
	{
		
		$logos = array(
		"af" => sfConfig::get("app_appFlower_logo"),
		"partner" => sfConfig::get("app_pdf_logo")
		);
		
		if(!$logos["af"] || !file_exists($logos["af"]["file"])) {
			$logos["af"]["file"] = sfConfig::get("sf_root_dir")."/plugins/appFlowerPlugin/web/images/logo.png";
		}
		
		$ps = ($this->orientation == "P") ? 210 : 297;
		$this->Image($logos["af"]["file"],10,5,0,0,'',$logos["af"]["url"]);
		
		$p1 = getimagesize($logos["af"]["file"]);
		
		if($logos["partner"]) {
			if(!file_exists($logos["partner"]["file"])) {
				$logos["partner"]["file"] = sfConfig::get("sf_root_dir")."/web".$logos["partner"]["file"];
			}
			if(file_exists($logos["partner"]["file"]) && is_file($logos["partner"]["file"])) {
				$p2 = getimagesize($logos["partner"]["file"]);
				$this->Image($logos["partner"]["file"],$ps-$this->getMMValue($p2[0])-10,5,0,0,'',$logos["partner"]["url"]);	
			} else {
				$p2 = array(0,0);
			}
		} else {
			$p2 = array(0,0);
		}
		
		$mh = max(array($p1[1],$p2[1]));	
	
		$this->setY((($mh/72)*25.4)+5);
		
	    $this->SetFont('Arial','B',10);
	    $this->Cell(0,10,ucwords($this->widget["title"])." Widget","B",1,"L");
	    $this->Ln(5);
	}
	
	function Footer()
	{
	    $this->SetY(-15);
	    $this->SetFont('Arial','I',8);
	    $this->Cell(0,10,'Generated by AppFlower '.$this->af_version.' - Page '.$this->PageNo().' / {nb}',"T",0,'C');	
		
	}


	function SetWidths($w)
	{
	    //Set the array of column widths
	    $this->widths=$w;
	}
	
	function SetAligns($a)
	{
	    //Set the array of column alignments
	    $this->aligns=$a;
	}
	
	function SetBorders($b)
	{
	    //Set the array of borders
	    $this->borders=$b;
	}
	
	function SetFontInfo($f)
	{
	    //Set the array of font data
	    $this->fontdata=$f;
	}
	
	function SetFills($f)
	{
	    //Set the array of borders
	    $this->fills=$f;
	}
	
	public function getMaxCellHeight($data) {
		
		foreach($data as $str) {
			if(strstr($str,"\n")) {
				$tmp[] = substr_count($str,"\n");
			} else {
				$tmp[] = 0;
			}
		}
		
		return max($tmp)+1;
		
	}
	
	public function Row($data,$form = false,$extra_borders = array(),$border_width = 0.2,$cell_height = 5)
	{
		
		$this->setLineWidth($border_width);
		
	    //Calculate the height of the row
	    $nb=0;
	    for($i=0;$i<count($data);$i++)
	        $nb=max($nb,$this->NbLines($this->widths[$i],$data[$i]));
	    $h=$cell_height*$nb;
	    //Issue a page break first if needed
	    $this->CheckPageBreak($h);
	    //Draw the cells of the row
	    for($i=0;$i<count($data);$i++)
	    {
	    	
	    	if(isset($this->fontdata[$i])) {
				$this->SetFont($this->fontdata[$i][0],$this->fontdata[$i][1],$this->fontdata[$i][2]);
			}
		
	        $w=$this->widths[$i];
	        $a=isset($this->aligns[$i]) ? $this->aligns[$i] : 'L';
	        $B=isset($this->borders[$i]) ? $this->borders[$i] : 0;
	        $BW=isset($this->border_widths[$i]) ? $this->border_widths[$i] : 0.2;
	        
	        if(isset($extra_borders[$i])) {
	        	$B = $extra_borders[$i];
	        } 
	        
	        $F=isset($this->fills[$i]) ? $this->fills[$i] : 0;
	        //Save the current position
	        $x=$this->GetX();
	        $y=$this->GetY();
	        
	        // Set fill color (if any)
	        if($F) {
	        	$this->setFillColor($F[0],$F[$i][1],$F[$i][2]);
	        } else {
	        	$this->setFillColor(255,255,255);
	        }
	        
	        if(!$form) {
	       		 $B = 0;
	       		 if($F) {
	       		 	$F = "FD";
	       		 } else {
	       		 	$F = "D";
	       		 }
	       		 $this->Rect($x,$y,$w,$h,$F); 	
	        }
	       
	    	if(strstr($data[$i],"afpdf_image")) {
				$data[$i] = trim(str_replace("afpdf_image:","",$data[$i]));
				$image = getimagesize($data[$i]);
				$ox = $this->getX();
				$oy = $this->getY();
				$h = $this->getMMValue($image[1]);
			} else {
				$image = null;
			}
	
			$this->MultiCell($w,($image) ? $h : $cell_height,($image) ? "" : $data[$i],$B,$a,$form);

			if($image) {
				$this->Image($data[$i],$ox+$border_width,$oy,0,0);
			}
			
	        //Put the position to the right of the cell
	        $this->SetXY($x+$w,$y);
	  
	    }
	    //Go to the next line
	    $this->Ln($h);
	}
	
	function CheckPageBreak($h)
	{
	    //If the height h would cause an overflow, add a new page immediately
	    if($this->GetY()+$h>$this->PageBreakTrigger)
	        $this->AddPage($this->CurOrientation);
	}
	
	function NbLines($w,$txt)
	{
	    //Computes the number of lines a MultiCell of width w will take
	    $cw=&$this->CurrentFont['cw'];
	    if($w==0)
	        $w=$this->w-$this->rMargin-$this->x;
	    $wmax=($w-2*$this->cMargin)*1000/$this->FontSize;
	    $s=str_replace("\r",'',$txt);
	    $nb=strlen($s);
	    if($nb>0 and $s[$nb-1]=="\n")
	        $nb--;
	    $sep=-1;
	    $i=0;
	    $j=0;
	    $l=0;
	    $nl=1;
	    while($i<$nb)
	    {
	        $c=$s[$i];
	        if($c=="\n")
	        {
	            $i++;
	            $sep=-1;
	            $j=$i;
	            $l=0;
	            $nl++;
	            continue;
	        }
	        if($c==' ')
	            $sep=$i;
	        $l+=$cw[$c];
	        if($l>$wmax)
	        {
	            if($sep==-1)
	            {
	                if($i==$j)
	                    $i++;
	            }
	            else
	                $i=$sep+1;
	            $sep=-1;
	            $j=$i;
	            $l=0;
	            $nl++;
	        }
	        else
	            $i++;
	    }
	    return $nl;
	}
}

?>